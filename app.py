# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L6J-ZfR-A2H2lTyxcNQt9AF87bsIw787
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics.pairwise import cosine_similarity
# Load the data from CSV file
df = pd.read_csv('synthetic_data.csv')


# Bar Plot: Location and Policy Uptake
st.subheader('Policy Uptake by Location')
location_counts = df['Location'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=location_counts.index, y=location_counts.values)
plt.xlabel('Location')
plt.ylabel('Policy Uptake')
plt.title('Policy Uptake by Location')
plt.xticks(rotation=45)
st.pyplot(plt)

# Grouped Bar Plot: Age, Gender, and Claim Frequency
st.subheader('Claim Frequency by Age and Gender')
grouped_data = df.groupby(['Age', 'Gender'])['Claim ID'].count().unstack()
plt.figure(figsize=(10, 6))
grouped_data.plot(kind='bar', stacked=False)
plt.xlabel('Age')
plt.ylabel('Claim Frequency')
plt.title('Claim Frequency by Age and Gender')
plt.legend(title='Gender', loc='upper right')
plt.xticks(rotation=50)
st.pyplot(plt)

# Policy Type Counts
st.subheader('Policy Type Distribution')
plt.figure(figsize=(10, 5))
plt.subplot(121)
policy_type_counts = df['Policy Type'].value_counts()
sns.barplot(x=policy_type_counts.index, y=policy_type_counts.values, color='purple')
plt.xlabel('Policy Type')
plt.ylabel('Count')
plt.title('Distribution of Policy Types')
plt.xticks(rotation=45)
st.pyplot(plt)

# Age and Location
st.subheader('Average Age across Locations')
age_location = df.pivot_table(values='Age', index='Location', aggfunc='mean')
plt.figure(figsize=(10, 6))
sns.heatmap(data=age_location, cmap='Blues', annot=True, fmt=".1f", cbar_kws={'label': 'Average Age'})
plt.xlabel('Location')
plt.ylabel('Age')
plt.title('Average Age across Locations')
st.pyplot(plt)

# Split the charts: Premium Amount Distribution
st.subheader('Premium Amount Distribution')
plt.subplot(122)
premium_amounts = df['Premium Amount']
sns.histplot(data=premium_amounts, bins=10, color='orange')
plt.xlabel('Premium Amount')
plt.ylabel('Count')
plt.title('Distribution of Premium Amounts')
plt.tight_layout()
st.pyplot(plt)


#display lineplot
st.subheader('Premium Amount vs. Policy Type')
fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(data=df, x='Policy Type', y='Premium Amount', ax=ax)
ax.set_xlabel('Policy Type')
ax.set_ylabel('Premium Amount')
ax.set_title('Premium Amount vs. Policy Type')
st.pyplot(fig)

# Display the scatter plot
st.subheader('Drop-off Points vs. App Login')
fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(data=df, x='Drop-off Points', y='App Login', ax=ax)
ax.set_xlabel('Drop-off Points')
ax.set_ylabel('App Login')
ax.set_title('Drop-off Points vs. App Login')
st.pyplot(fig)



# Bar Plot: Feature Usage vs. Experience Rating
st.subheader('Feature Usage vs. Experience Rating')
fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(data=df, x='Feature Usage', y='Experience Rating', ax=ax)
ax.set_xlabel('Feature Usage')
ax.set_ylabel('Experience Rating')
ax.set_title('Comparison of Feature Usage and Experience Rating')
st.pyplot(fig)


# Display the scatter plot
st.subheader('Comparison of Feature Usage and Responsiveness Rating')
plt.figure(figsize=(10, 6))
sns.lineplot(data=df, x='Feature Usage', y='Responsiveness Rating')
plt.xlabel('Feature Usage')
plt.ylabel('Responsiveness Rating')
plt.title('Comparison of Feature Usage and Responsiveness Rating')
st.pyplot(plt)




# Define the features for policy recommendation
policy_features = ['Age', 'Occupation', 'Policy Type']
df_policy_encoded = pd.get_dummies(df[policy_features])
similarity_matrix_policy = cosine_similarity(df_policy_encoded.values)
# Define the features for feature ease recommendation
feature_features = ['Drop-off Points', 'Experience Rating', 'Responsiveness Rating']
df_feature_encoded = pd.get_dummies(df[feature_features])
similarity_matrix_feature = cosine_similarity(df_feature_encoded.values)
def get_policy_recommendations(customer_id, top_n=5):
    customer_index = df[df['Customer ID'] == customer_id].index[0]
    sim_scores = list(enumerate(similarity_matrix_policy[customer_index]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    top_sim_scores = sim_scores[1:top_n+1]  # Exclude self and get top N similar customers
    top_customer_indices = [score[0] for score in top_sim_scores]
    recommendations = df.loc[top_customer_indices, 'Premium Amount']
    return recommendations
def get_feature_ease_recommendations(customer_id, top_n=5):
    customer_index = df[df['Customer ID'] == customer_id].index[0]
    sim_scores = list(enumerate(similarity_matrix_feature[customer_index]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    top_sim_scores = sim_scores[1:top_n+1]  # Exclude self and get top N similar customers
    top_customer_indices = [score[0] for score in top_sim_scores]
    recommendations = df.loc[top_customer_indices, feature_features]
    return recommendations
# Run the app
if __name__ == '__main__':
    st.title('Recommender Systems')

    # Customer selection
    customer_id = st.selectbox('Select a customer ID:', df['Customer ID'].unique())

    # Get policy recommendations
    policy_recommendations = get_policy_recommendations(customer_id)

    # Display policy recommendations
    st.subheader('Recommended Premium Amounts:')
    st.table(policy_recommendations)

    # Get feature ease recommendations
    feature_recommendations = get_feature_ease_recommendations(customer_id)

    # Display feature ease recommendations
    st.subheader('Recommended Feature Ease:')
    st.table(feature_recommendations)
